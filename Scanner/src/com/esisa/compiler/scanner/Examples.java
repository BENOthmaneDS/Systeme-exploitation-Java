package com.esisa.compiler.scanner;
import java.util.Vector;

import com.esisa.compiler.scanner.dfa.Identifier;
import com.esisa.compiler.scanner.dfa.Number;
import com.esisa.compiler.scanner.dfa.RelationalOperator;



public class Examples {

	public Examples() {
		exp08();
	}
	
	void exp01() {
		State e0 = new State(0);
		State e1 = new State(1, true);
		
		System.out.println("e0 = "+ e0);
		System.out.println("e1 = "+ e1);
		
		System.out.println("e0 est accepteur :"+ e0.isAccepting());
		System.out.println("e1 est accepteur :"+ e1.isAccepting());
	}
	
	void exp02() {
		//Automate des nombres
		State e0 = new State(0);
		State e1 = new State(1, true);
		State e2 = new State(2, true);
		State e3 = new State(3, false);
		
		Transition t = new Transition(4);
		t.add(e0, e1, '0', '9');
		t.add(e0, e3, '.');
		
		t.add(e1, e1, '0', '9');
		t.add(e1, e2, '.');
		
		t.add(e2, e2, '0', '9');
		t.add(e2, e2, '0', '9');
		
	}
	
	void exp03() {
		//Automate des identificateurs
		State e0 = new State(0);
		State e1 = new State(1, true);
		
		
		Transition t = new Transition(2);
		t.add(e0, e1, 'a', 'z');
		t.add(e0, e1, 'A', 'Z');
		t.add(e0, e1, '_');
		
		t.add(e1, e1, 'a', 'z');
		t.add(e1, e1, 'A', 'Z');
		t.add(e1, e1, '_');
		t.add(e1, e1, '0', '9');
		
		System.out.println("t[0]['d'] = "+ t.get(e0, 'd'));
		System.out.println("t[0]['3'] = "+ t.get(e0, '3'));
		System.out.println("t[0]['9'] = "+ t.get(e1, '9'));
		
	}
	
	void exp04() {
		//Automate des operateurs de relation
		State e0 = new State(0);
		State e1 = new State(1, true);
		State e2 = new State(2, true);
		State e3 = new State(3, false);
		
		
		Transition t = new Transition(3);
		t.add(e0, e1, "<>");
		t.add(e0, e3, "=!");
		t.add(e1, e2, '=');
		t.add(e3, e2, '=');
		
		
		System.out.println("t[0]['!'] = "+ t.get(e0, '!'));
		System.out.println("t[1]['3'] = "+ t.get(e1, '3'));
		
		
		
	}
	void exp05() {
		//Automates des nombres
		DFA nb = new DFA("nb", 4, 1, 2); //4 états dont 1 et 2 sont accepteurs
		nb.add(0, 1, '0', '9');
		nb.add(0, 3, '.');
		nb.add(1, 1, '0', '9');
		nb.add(1, 2, '.');
		nb.add(2, 2, '0', '9');
		nb.add(3, 2, '0', '9');
		
		InputTape input = new InputTape("double alpha = 99.554141;");     
		Token token = nb.extract(input);
		System.out.println(token + " => " + input.getReadHead());
		
		input.setReadHead(15);
		token = nb.extract(input);
		System.out.println(token + " => " + input.getReadHead());
	}
	
	void exp06() {
		Number nb = new Number(); 
		Identifier id = new Identifier();
		
		InputTape input = new InputTape("double alpha = 99.554141;");     
		Token token = id.extract(input);
		System.out.println(token + " => " + input.getReadHead());
		
		input.setReadHead(15);
		token = nb.extract(input);
		System.out.println(token + " => " + input.getReadHead());
	}
	
	void exp07() {
		String buffer = "double x1 = 99.554 * x2 + x3 / 25.01 + x4;";
		InputTape input = new InputTape(buffer);
		Scanner scanner =  new Scanner(); 
		while(!input.eof()) {
			Token token = scanner.getNextToken(input);
			if(token != null) {
				System.out.println(token);
			}
		}
		
	}
	
	void exp08() {
		Scanner scanner = new Scanner();
		String buffer = "double x1 = 99.554 * x2 + x3 / 25.01 + x4;";
		Vector<Token> tokens = scanner.scan(buffer);
		System.out.println("------------------");
		System.out.println("Table des symboles");
		System.out.println("------------------");
		for (Token token : tokens) {
			System.out.println(token);
		}
		
		Vector<Error> errors = scanner.getErrors();
		System.out.println("------------------");
		System.out.println("Liste des Erreurs");
		System.out.println("------------------");
		for (Error error : errors) {
			System.out.println(error);
		}
		
	}
	
	public static void main(String[] args) {
		new Examples();
	}
}
