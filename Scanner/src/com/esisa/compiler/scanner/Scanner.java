package com.esisa.compiler.scanner;

import java.util.Vector;

import com.esisa.compiler.scanner.dfa.Blank;
import com.esisa.compiler.scanner.dfa.Comment;
import com.esisa.compiler.scanner.dfa.Identifier;
import com.esisa.compiler.scanner.dfa.LitteralString;
import com.esisa.compiler.scanner.dfa.Number;



public class Scanner {
	public static final Token EOF = new Token("$","$");
	
	private Vector<DFA> list;
	private Vector<Error> errors;
	private Vector<ReservedWordList> reservedWords;
	
	public Scanner() {
		list = new Vector<DFA>();
		add(new Identifier());
		add(new Number());
		add(new Blank());  // I have the error here when i added this line 
		add(new LitteralString());
		add(new Comment());
		errors = new Vector<Error>();
		
		//Créer et remplir la liste des mots reservés :
		reservedWords = new Vector<ReservedWordList>();
		add("type", "byte short int long float double char boolean");
		add("modifier", "private public protected final static synchronized");
		add("keyword", "class interface package import super this new void if else for do while switch");
	}
	
	public void add(DFA a) {
		list.add(a);
	}
	
	public void add(ReservedWordList list) {
		reservedWords.add(list);
	}
	
	public void add(String name, String list) {
		add(new ReservedWordList(name, list));
	}
	
	//Verifier si un token est un identificateur est un mot reservé dans tel cas
	// on va le lui changer le type 
	public void checkResevedWord(Token token) {
		if(token.is("id")){
			for(ReservedWordList list : reservedWords) {
				if(list.contains(token.getValue())) {
					token.setType(list.getName());
					return;
				}
			}
		}
	}
	
	public Vector<Error> getErrors() {
		return errors;
	}
	
	public Token getNextToken(InputTape input) {
		if(input.eof()) return EOF;
		for (DFA a : list) {
			Token token = a.extract(input);
			if(token != null) {
				if(token.is("blank")) {
					return getNextToken(input);
				}
				checkResevedWord(token);
				return token;
			}
		}
		errors.add(new Error("Lexical", ""+input.current(), input.getReadHead()));
		input.next();
		return null; 
	}
	
	public Vector<Token> scan(String buffer){
		Error.reset();
		Vector<Token> tokens = new Vector<Token>();
		errors = new Vector<Error>();
		InputTape input = new InputTape(buffer);
		Token token = getNextToken(input);
		while(token != EOF) {
			
			if(token != null) {
				tokens.add(token);
			}
			token = getNextToken(input);
		}
		return tokens;
	}
	
	
}
