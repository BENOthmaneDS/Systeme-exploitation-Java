package com.esisa.compiler.scanner;

import java.util.Iterator;

public class DFA {
	private String name;
	private State E[];  //Ensemble des états des automates 
	private Transition T;
	
	public DFA(String name, int statesCount, int...acceptingStates) {
		this.name = name;
		/*
		 * Création du tableau d'états avec tous les états non accepteurs
		 * i -> E[i]
		 */
		E = new State[statesCount];
		for (int i = 0; i < statesCount; i++) {
			E[i] = new State(i);
		}
		/*
		 * Préciser les états accepteurs 
		 */
		for (int i : acceptingStates) {
			E[i].setAccepting(true);
		}
		/*
		 * Création de la fonction de transition 
		 */
		T = new Transition(statesCount);
	}
	
	public void add(int source, int target, int s) {
		T.add(E[source], E[target], s);
	}
	
	public void add(int source, int target, int min, int max) {
		T.add(E[source], E[target], min, max);
	}
	
	public void add(int source, int target, String set) {
		T.add(E[source], E[target], set);
	}
	/*
	 * Algorithme d'extraction d'ue unité lexicale (lexème)
	 */
	
	public Token extract(InputTape input) {
		State e = E[0];
		char s = input.first();
		
		//Tant qu'il y a une transition 
		while(T.get(e, s) != null) {
			//on transite
			e = T.get(e, s);
			//on passe au symbole suivant:
			
			s = input.next();	
		}
		if(e.isAccepting()) {
			String value = input.getToken();
			return new Token(value, name);
		}else {
			input.reset();
			return null;
		}

	}
	
	public String getName() {
		return name;
	}
}
